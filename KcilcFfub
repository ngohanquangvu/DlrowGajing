os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"
proxy_server = ""
username = ""
password = ""
def get_proxy():
    return proxy_server, username, password
def change_proxy(type):
    global status, proxy_server, username, password
    if type == 1:
        url = "https://api.zproxy.me/api/rotateProxy/getNewProxy?apiKey=624AE17EB0ECFA163C0D931C2BDE54D1&country=United+States"
    else:
        url = "https://api.zproxy.me/api/rotateProxy/getNewProxy?apiKey=30AC4B7F206A29607F17316F44CF9267&country=Vietnam&type=datacenter"
    while status:
        try:
            a = requests.get(url)
            if type == 1:
                    proxy_server = f'http://{a.json()["data"]["proxy"]}'
                    username = a.json()["data"]["username"] 
                    password = a.json()["data"]["password"]
            else:
                proxy_server = f'http://103.116.39.192:{random.randint(30000, 30299)}'
                username = "hanqvu" 
                password = "hanqvu"
        except Exception as e:
            time.sleep(5)
            continue
        time.sleep(120)
def run(playwright, dem, index, proxy_type, lock):
    global list_url, running, url_complete, timeout, proxy_server, username, password
    headless = True
    while True:
        click = 0
        with lock:
            if len(list_url) == 0:
                break
            url = list_url.pop(0)
        while click < dem:  # Số lần truy cập lại URL
            proxy_server, username, password = get_proxy()
            while True:
                try:
                    browser = playwright.firefox.launch(proxy={
                        "server": proxy_server,
                        "username": username,
                        "password": password
                    }, headless=headless)
                    break
                except Exception as e:

                    continue
            running[index] = ["Clicking", url, click]
            context = browser.new_context()
            page = context.new_page()
            refresh_count = 0
            max_refresh = 5

            while True:
                try:
                    page.goto(url, timeout=30000, wait_until="domcontentloaded")

                    # Thời gian timeout để kiểm tra video
                    check_timeout = timeout
                    start_time_run = time.time()
                    if "/video/" in url or "shorts" in url or "live" in url:
                        video_playing = False

                        while time.time() - start_time_run < check_timeout:
                            video_playing = page.evaluate("""
                                (function() {
                                    var videos = document.querySelectorAll('video');
                                    for (var i = 0; i < videos.length; i++) {
                                        if (!videos[i].paused) {
                                            return true;
                                        }
                                    }
                                    return false;
                                })();
                            """)
                            if video_playing:
                                break
                            time.sleep(0.5)  # Chờ một giây trước khi kiểm tra lại

                            # Nếu trang đã load hoàn toàn mà video không phát, reload lại trang
                            if page.evaluate("document.readyState") == "complete" and not video_playing:
                                time.sleep(7)
                                video_playing = page.evaluate("""
                                    (function() {
                                        var videos = document.querySelectorAll('video');
                                        for (var i = 0; i < videos.length; i++) {
                                            if (!videos[i].paused) {
                                                return true;
                                            }
                                        }
                                        return false;
                                    })();
                                """)
                                if video_playing:
                                    break

                                refresh_count += 1
                                if refresh_count > max_refresh:
                                    page.close()
                                    context.close()
                                    browser.close()
                                    break
                                page.reload()
                                start_time_run = time.time()  # Reset lại thời gian bắt đầu kiểm tra  # Reset lại thời gian bắt đầu kiểm tra

                        if refresh_count > max_refresh:
                            page.close()
                            context.close()
                            browser.close()
                            continue
                    else:
                        while time.time() - start_time_run < check_timeout:
                            try:
                                time.sleep(1)
                                if page.evaluate("document.readyState") == "complete":
                                    video_playing = True
                                    break
                            except:
                                continue

                    # Cuộn xuống một độ cao ngẫu nhiên sau khi video đã phát
                    if video_playing:
                        scroll_height = page.evaluate("document.documentElement.scrollHeight")
                        random_scroll_height = random.randint(0, scroll_height)
                        page.evaluate(f"window.scrollTo(0, {random_scroll_height});")
                        time.sleep(1)

                        # Bấm vào một URL bất kỳ trong trang
                        elements = page.query_selector_all("a[href]")
                        if elements:
                            random_element = random.choice(elements)
                            random_element.click()
                        time.sleep(5)

                    page.close()
                    context.close()
                    browser.close()
                    running[index] = ["Click Success", url, click]
                    click += 1
                    break
                except Exception as e:
                    page.close()
                    context.close()
                    browser.close()
                    break
        url_complete += 1
    running[index] = ["Done", "", ""]

def process_url(dem, index, lock, proxy_type):
        with sync_playwright() as playwright:
            run(playwright, dem, index, proxy_type, lock)

def checking():
    global url_complete, running, start_time, status
    while status:
        for j in range(len(running)):
            if running[j][0]=="Click Success" or running[j][0]=="Done":
                print(f"\033[32mThread {j+1}: {running[j][0]} | {running[j][1]} | {running[j][2]}\033[0m")
                print("")
            elif running[j][0]=="Clicking":
                print(f"\033[33mThread {j+1}: {running[j][0]} | {running[j][1]} | {running[j][2]}\033[0m")
                print("")
            else:
                print(f"\033[36mThread {j+1}: {running[j][0]} | {running[j][1]} | {running[j][2]}\033[0m")
                print("")
        end_time = time.time()

        execution_time = end_time - start_time
        hours, rem = divmod(execution_time, 3600)
        minutes, seconds = divmod(rem, 60)
        formatted_time = "{:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds)

        print(f"\033[33mProcess: {formatted_time} - Url complete: {url_complete}\033[0m")
        time.sleep(1)
        os.system('cls')


start_tool = input("Enter để băt đầu...")
list_url = askopenfilename(title="Chọn file chứa danh sách URL cần truy cập", filetypes=[("Text files", "*.txt")])
list_url = [line.strip() for line in open(list_url, "r").readlines()]
print(f"Data: {len(list_url)} urls")
while True:
    try:
        dem = int(input("Nhập số lần truy cập: "))
        break
    except ValueError:
        print("Số lần truy cập phải là số nguyên")
        continue
while True:
    try:
        luong = int(input("Nhập số luồng: "))
        break
    except ValueError:
        print("Số luồng phải là số nguyên")
        continue
while True:
    try:
        timeout = int(input("Nhập timeout(s): "))
        break
    except ValueError:
        print("Số timeout phải là số nguyên")
        continue

while True:
    try:
        proxy_type = int(input("Chọn loại proxy (1. Proxy us |2. Proxy Vn): "))
        if proxy_type not in [1, 2]:
            print("Loại proxy không hợp lệ")
            continue
        break
    except ValueError:
        print("Loại proxy phải là số nguyên")
        continue


url_complete = 0
running = [['','',''] for _ in range(luong)]
lock = threading.Lock()
status = True
start_time = time.time()
t = threading.Thread(target=checking)
t.start()
tt = threading.Thread(target=change_proxy, args=(proxy_type,))
tt.start()
threads = []
for i in range(luong):
    thread = threading.Thread(target=process_url, args=(dem, i, lock, proxy_type,))
    threads.append(thread)
    thread.start()
for thread in threads:
    thread.join()
t.join()
tt.join()
end_time = time.time()

execution_time = end_time - start_time
hours, rem = divmod(execution_time, 3600)
minutes, seconds = divmod(rem, 60)
formatted_time = "{:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds)

print(f"\033[33mProcess: {formatted_time}\033[0m")
output = input("Nhấn Enter để thoát...")
status = False
