os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"
proxy_server = ""
username = ""
password = ""


def run(playwright, dem, index, lock):
    global list_url, running, url_complete, timeout, delay, proxy_server, username, password
    headless = False
    mp4 = True
    while True:
        click = 0
        with lock:
            if len(list_url) == 0:
                break
            url = list_url.pop(0)
        while click < dem:  # Số lần truy cập lại URL
            while True:
                try:
                    browser = playwright.firefox.launch(proxy={
                        "server": proxy_server,
                        "username": username,
                        "password": password
                    }, headless=headless)
                    break
                except:
                    pass
            running[index] = ["Clicking", url, click]
            context = browser.new_context()
            page = context.new_page()
            try:
                page.goto(url, timeout=timeout*1000, wait_until="domcontentloaded")
                if mp4==True:
                    try:
                        if "video" in url or "shorts" in url:
                            page.wait_for_event('request', lambda request: request.url.endswith('.mp4'), timeout=timeout*1000)
                    except: 
                        mp4 = False
                else:
                    time.sleep(5)
                time.sleep(delay+random.randint(5, 20))
                scroll_height = page.evaluate("document.documentElement.scrollHeight")
                for _ in range(5):
                    page.evaluate(f"window.scrollTo(0, {scroll_height});")
                    time.sleep(1)
                elements = page.query_selector_all("a[href*='/video/']")
                if elements:
                    random_element = random.choice(elements)
                    random_element.click()
                time.sleep(5)
                page.close()
                context.close()
                browser.close()
                running[index] = ["Click Success", url, click]
                click += 1
            except:
                running[index] = ["Reload", url, click]
                pass
        url_complete += 1
    running[index] = ["Done", "", ""]

def process_url(dem, index, lock):
        with sync_playwright() as playwright:
            run(playwright, dem, index, lock)

def checking():
    global url_complete, running, start_time, status
    while status:
        for j in range(len(running)):
            if running[j][0]=="Click Success" or running[j][0]=="Done":
                print(f"\033[32mThread {j+1}: {running[j][0]} | {running[j][1]} | {running[j][2]}\033[0m")
                print("")
            elif running[j][0]=="Clicking":
                print(f"\033[33mThread {j+1}: {running[j][0]} | {running[j][1]} | {running[j][2]}\033[0m")
                print("")
            else:
                print(f"\033[36mThread {j+1}: {running[j][0]} | {running[j][1]} | {running[j][2]}\033[0m")
                print("")
        end_time = time.time()

        execution_time = end_time - start_time
        hours, rem = divmod(execution_time, 3600)
        minutes, seconds = divmod(rem, 60)
        formatted_time = "{:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds)

        print(f"\033[33mProcess: {formatted_time} - Url complete: {url_complete}\033[0m")
        time.sleep(1)
        os.system('cls')


start_tool = input("Enter để băt đầu...")
list_url = askopenfilename(title="Chọn file chứa danh sách URL cần truy cập", filetypes=[("Text files", "*.txt")])
list_url = [line.strip() for line in open(list_url, "r").readlines()]
print(f"Data: {len(list_url)} urls")
while True:
    try:
        dem = int(input("Nhập số lần truy cập: "))
        break
    except ValueError:
        print("Số lần truy cập phải là số nguyên")
        continue
while True:
    try:
        luong = int(input("Nhập số luồng: "))
        break
    except ValueError:
        print("Số luồng phải là số nguyên")
        continue
while True:
    try:
        timeout = int(input("Nhập timeout(s): "))
        break
    except ValueError:
        print("Số timeout phải là số nguyên")
        continue

while True:
    try:
        delay = int(input("Nhập thời gian treo tab(s): "))
        break
    except ValueError:
        print("Số thời gian treo tab phải là số nguyên")
        continue

def get_proxy(key):
    global status, proxy_server, username, password
    while status:
        try:
            a = requests.get(f"https://api.zproxy.me/api/rotateProxy/getNewProxy?apiKey={key}&country=United+States&type=residential")
            proxy_server = f'http://{a.json()["data"]["proxy"]}'
            username = a.json()["data"]["username"]
            password = a.json()["data"]["password"]
        except:
            pass
        time.sleep(60)
url_complete = 0
running = [['','',''] for _ in range(luong)]
lock = threading.Lock()
status = True
start_time = time.time()
t = threading.Thread(target=checking)
t.start()
tt = threading.Thread(target=get_proxy, args=("E7111978AEB60BB8294FC431CBCA85F4",))
tt.start()
threads = []
for i in range(luong):
    thread = threading.Thread(target=process_url, args=(dem, i, lock))
    threads.append(thread)
    thread.start()
for thread in threads:
    thread.join()
t.join()
tt.join()
end_time = time.time()

execution_time = end_time - start_time
hours, rem = divmod(execution_time, 3600)
minutes, seconds = divmod(rem, 60)
formatted_time = "{:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds)

print(f"\033[33mProcess: {formatted_time}\033[0m")
output = input("Nhấn Enter để thoát...")
status = False
