os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"
proxy_server = ""
username = ""
password = ""
def get_proxy():
    return proxy_server, username, password
def check_country(proxy_server, username, password):
        try:
            a = requests.get(f"https://freeipapi.com/api/json/{proxy_server.split(':')[0]}").json()["countryCode"]
            if a == "VN":
                return True
            else:
                return False
        except Exception as e:
            return False

def change_proxy(type):
    global status, proxy_server, username, password
    proxies = [{'proxy_server': 'http://103.241.199.37:49154', 'username': 'user49154', 'password': 'TN5096zL5i'}, {'proxy_server': 'http://103.162.31.234:49146', 'username': 'user49146', 'password': 'SEXmWOCgdk'}, {'proxy_server': 'http://42.96.12.229:49007', 'username': 'user49007', 'password': 'Qn9OzDJxp3'}, {'proxy_server': 'http://42.96.12.24:49311', 'username': 'user49311', 'password': 'fVbIMGs2yb'}, {'proxy_server': 'http://42.96.12.229:49062', 'username': 'user49062', 'password': '0eDLxVpZy7'}, {'proxy_server': 'http://42.96.12.229:49013', 'username': 'user49013', 'password': 'kNEwjTKpMT'}, {'proxy_server': 'http://42.96.12.24:49430', 'username': 'user49430', 'password': 'KXqQxiLlVp'}, {'proxy_server': 'http://42.96.12.24:49009', 'username': 'user49009', 'password': '4EwONJ9B2L'}, {'proxy_server': 'http://103.162.31.100:49197', 'username': 'user49197', 'password': 'JAGbw3LfAu'}, {'proxy_server': 'http://42.96.12.229:49473', 'username': 'user49473', 'password': 'BrELTkNNrU'}, {'proxy_server': 'http://42.96.12.24:49044', 'username': 'user49044', 'password': 'Gr3zIrIHQK'}, {'proxy_server': 'http://42.96.12.24:49405', 'username': 'user49405', 'password': 'CS0ShU3cWy'}, {'proxy_server': 'http://42.96.12.24:49250', 'username': 'user49250', 'password': '5UZxHDdFfa'}, {'proxy_server': 'http://42.96.12.24:49090', 'username': 'user49090', 'password': '4523IZ2AOc'}, {'proxy_server': 'http://42.96.12.24:49026', 'username': 'user49026', 'password': 'tTGcSPRlUS'}, {'proxy_server': 'http://103.162.31.234:49002', 'username': 'user49002', 'password': 'okkGuSd4Sx'}, {'proxy_server': 'http://42.96.12.24:49314', 'username': 'user49314', 'password': 'Lks7AtLQbY'}, {'proxy_server': 'http://42.96.12.229:49479', 'username': 'user49479', 'password': 'JgGldaamBM'}, {'proxy_server': 'http://42.96.12.24:49004', 'username': 'user49004', 'password': 's6VT5SHHeM'}, {'proxy_server': 'http://42.96.12.24:49003', 'username': 'user49003', 'password': 'VDPY2L3RIq'}, {'proxy_server': 'http://42.96.12.24:49163', 'username': 'user49163', 'password': 'W1UItwpr7b'}, {'proxy_server': 'http://42.96.12.24:49216', 'username': 'user49216', 'password': 'eOOiOaf2uJ'}, {'proxy_server': 'http://42.96.12.24:49004', 'username': 'user49004', 'password': 's6VT5SHHeM'}, {'proxy_server': 'http://42.96.12.24:49003', 'username': 'user49003', 'password': 'VDPY2L3RIq'}, {'proxy_server': 'http://42.96.12.24:49423', 'username': 'user49423', 'password': 'XrDE65PAoL'}, {'proxy_server': 'http://42.96.12.24:49220', 'username': 'user49220', 'password': 'yWTxw4fage'}, {'proxy_server': 'http://42.96.12.229:49431', 'username': 'user49431', 'password': 'VnzZak7Wr3'}, {'proxy_server': 'http://103.241.199.37:49430', 'username': 'user49430', 'password': 'mUomhoSAzI'}, {'proxy_server': 'http://103.241.199.37:49117', 'username': 'user49117', 'password': 'usWx4dSOdv'}, {'proxy_server': 'http://42.96.12.24:49260', 'username': 'user49260', 'password': 'xV83yMOx1H'}, {'proxy_server': 'http://103.162.31.234:49419', 'username': 'user49419', 'password': 'lzCn3KcAoS'}, {'proxy_server': 'http://42.96.12.24:49241', 'username': 'user49241', 'password': 'qHfS9i4Ouk'}, {'proxy_server': 'http://42.96.12.24:49148', 'username': 'user49148', 'password': '4dwZ8pbF3Z'}, {'proxy_server': 'http://103.241.199.37:49245', 'username': 'user49245', 'password': 'lntElktMLe'}, {'proxy_server': 'http://42.96.12.24:49272', 'username': 'user49272', 'password': 'VI8WPzQh84'}, {'proxy_server': 'http://42.96.12.229:49351', 'username': 'user49351', 'password': 'wgVn4gAvRm'}, {'proxy_server': 'http://42.96.12.24:49320', 'username': 'user49320', 'password': 'eHBgXjk4WG'}, {'proxy_server': 'http://42.96.12.24:49033', 'username': 'user49033', 'password': 'F5iNKfJZvF'}, {'proxy_server': 'http://42.96.12.24:49364', 'username': 'user49364', 'password': 'l7wZPmVGaW'}, {'proxy_server': 'http://42.96.12.24:49150', 'username': 'user49150', 'password': 'P7adiqWXqE'}, {'proxy_server': 'http://42.96.12.229:49329', 'username': 'user49329', 'password': 'SzCl2d2Nhr'}, {'proxy_server': 'http://42.96.12.24:49182', 'username': 'user49182', 'password': 'Ta1LFr0nEU'}, {'proxy_server': 'http://42.96.12.24:49468', 'username': 'user49468', 'password': 'n572URhpqJ'}, {'proxy_server': 'http://42.96.12.24:49030', 'username': 'user49030', 'password': 'wYIBVwltWr'}, {'proxy_server': 'http://103.241.199.37:49200', 'username': 'user49200', 'password': 'N2NLWxUgSx'}, {'proxy_server': 'http://103.241.199.37:49389', 'username': 'user49389', 'password': 'UbAXqsoUrE'}]
    data = random.choice(proxies)
    proxy_server = data["proxy_server"]
    username = data["username"]
    password = data["password"]
    
    
    # if type == 1:
    #     proxy_server = f'http://hub-us-8.litport.net:31682'
    #     username = "0JeLKc" 
    #     password = "G69qYC"
    # else:
    #     list_country = ["Vietnam", "Singapore", "Japan"]
    #     ct = random.choice(list_country)
    #     url = f"https://api.zproxy.me/api/rotateProxy/getNewProxy?apiKey=9F650FB025188C0316198467E0113E0F&country={ct}"
    # choice = 0
    # while status:
    #     try:
    #         a = requests.get(url)
    #         if type == 1:
    #             if choice%2 != 0:
    #                 proxy_server = f'http://180.131.145.172:{random.randint(30000, 30099)}'
    #                 username = "hanqvu" 
    #                 password = "hanqvu"
    #             else:
    #                 proxy_server = f'http://{a.json()["data"]["proxy"]}'
    #                 username = a.json()["data"]["username"] 
    #                 password = a.json()["data"]["password"]
    #         else:
    #                 proxy_server = f'http://{a.json()["data"]["proxy"]}'
    #                 username = a.json()["data"]["username"] 
    #                 password = a.json()["data"]["password"]
    #         choice += 1
    #     except Exception as e:
    #         open("error.txt", "a").write(f"{str(e)}\n")
    #         time.sleep(5)
    #         continue
    #     time.sleep(600)
def run(playwright, dem, index, proxy_type, lock):
    global list_url, running, url_complete, timeout, proxy_server, username, password, version
    headless = True
    while True:
        click = 0
        with lock:
            if len(list_url) == 0:
                break
            url = list_url.pop(0)
        while click < dem:  # Số lần truy cập lại URL
            proxy_server, username, password = get_proxy()
            device = random.choice(list(playwright.devices.values()))
            while True:
                try:
                    browser = playwright.firefox.launch(proxy={
                        "server": proxy_server,
                        "username": username,
                        "password": password
                    }, headless=headless)
                    break
                except Exception as e:

                    continue
            
            running[index] = ["Clicking", url, click]
            context = browser.new_context(
                device_scale_factor=device.get('device_scale_factor', 1),
                user_agent=device.get('userAgent')
            )
            page = context.new_page()
            page.set_viewport_size({
                "width": device["viewport"]["width"],
                "height": device["viewport"]["height"]
            })
            refresh_count = 0
            max_refresh = 5

            while True:
                try:
                    page.goto(url, timeout=30000, wait_until="domcontentloaded")
                    time.sleep(10)

                    elements = page.query_selector_all("div.absolute.top-4.right-4 > span.inline-block > svg[data-testid='common-xmark']")
                    print(f"Found {len(elements)} elements matching the selector.")
                    if len(elements) == 1:
                        elements[0].click()
                        print("Clicked on the close button")
                    else:
                        print("Có nhiều phần tử khớp với bộ chọn hoặc không tìm thấy phần tử nào.")
                    time.sleep(5)


                    try:
                        # Chờ đến khi nút "vast-skip-button" xuất hiện
                        page.wait_for_selector(".vast-skip-button", timeout=10000)
                        time.sleep(2)

                        # Chờ đến khi nút "vast-skip-button enabled" có thể click
                        skip_button = page.wait_for_selector("//div[contains(@class,'vast-skip-button skippable')]", timeout=20000)
                        skip_button.click()
                        print("Skip ads")
                    except Exception as e:
                        print("Chưa thể skip")
                        pass
                    
                    # Thời gian timeout để kiểm tra video
                    check_timeout = timeout
                    start_time_run = time.time()
                    if "/video/" in url or "shorts" in url or "live" in url:
                        video_playing = False

                        while time.time() - start_time_run < check_timeout:
                            video_playing = page.evaluate("""
                                (function() {
                                    var videos = document.querySelectorAll('video');
                                    for (var i = 0; i < videos.length; i++) {
                                        if (!videos[i].paused) {
                                            return true;
                                        }
                                    }
                                    return false;
                                })();
                            """)
                            if video_playing:
                                time.sleep(3)
                                break
                            time.sleep(0.5)  # Chờ một giây trước khi kiểm tra lại

                            # Nếu trang đã load hoàn toàn mà video không phát, reload lại trang
                            if page.evaluate("document.readyState") == "complete" and not video_playing:
                                time.sleep(7)
                                video_playing = page.evaluate("""
                                    (function() {
                                        var videos = document.querySelectorAll('video');
                                        for (var i = 0; i < videos.length; i++) {
                                            if (!videos[i].paused) {
                                                return true;
                                            }
                                        }
                                        return false;
                                    })();
                                """)
                                if video_playing:
                                    break

                                refresh_count += 1
                                if refresh_count > max_refresh:
                                    page.close()
                                    context.close()
                                    browser.close()
                                    break
                                page.reload()
                                start_time_run = time.time()  # Reset lại thời gian bắt đầu kiểm tra  # Reset lại thời gian bắt đầu kiểm tra

                        if refresh_count > max_refresh:
                            page.close()
                            context.close()
                            browser.close()
                            continue

                    else:
                        while time.time() - start_time_run < check_timeout:
                            try:
                                time.sleep(1)
                                if page.evaluate("document.readyState") == "complete":
                                    video_playing = True
                                    break
                            except:
                                continue

                    # Cuộn xuống một độ cao ngẫu nhiên sau khi video đã phát
                    if version == 2:
                        if timeout <= 20:
                            if video_playing:
                                scroll_height = page.evaluate("document.documentElement.scrollHeight")
                                random_scroll_height = random.randint(0, scroll_height)
                                page.evaluate(f"window.scrollTo(0, {random_scroll_height});")
                                time.sleep(1)

                                # Bấm vào một URL bất kỳ trong trang
                                elements = page.query_selector_all("a[href]")
                                if elements:
                                    random_element = random.choice(elements)
                                    random_element.click()
                                time.sleep(5)
                        else:
                            check_timeout_20 = timeout - 10
                            page.click(f'img[src="/img/logo/gjw_logo_glow_v1.png"]')
                            time.sleep(1)
                            start_time_run_20 = time.time()
                            while time.time() - start_time_run_20 < check_timeout_20:
                                scroll_height = page.evaluate("document.documentElement.scrollHeight")
                                random_scroll_height = random.randint(0, scroll_height)
                                page.evaluate(f"window.scrollTo(0, {random_scroll_height});")
                                time.sleep(1)
                                elements = page.query_selector_all('a[href*="/video/"]')
                                if elements:
                                    random_element = random.choice(elements)
                                    random_element.click()
                                time.sleep(random.randint(8, 13))
                                click_logo = random.randint(0, 1)
                                if click_logo==1:
                                    page.click(f'img[src="/img/logo/gjw_logo_glow_v1.png"]')
                                    time.sleep(1)
                    else:
                        page.click(f'img[src="/img/logo/gjw_logo_glow_v1.png"]')
                        time.sleep(5)
                        # scroll_height = page.evaluate("document.documentElement.scrollHeight")
                        # random_scroll_height = random.randint(0, scroll_height)
                        # page.evaluate(f"window.scrollTo(0, {random_scroll_height});")
                        # time.sleep(1)

                        # # Bấm vào một URL bất kỳ trong trang
                        # elements = page.query_selector_all("a[href]")
                        # if elements:
                        #     random_element = random.choice(elements)
                        #     random_element.click()
                        # time.sleep(5)
                        
                    page.close()
                    context.close()
                    browser.close()
                    running[index] = ["Click Success", url, click]
                    click += 1
                    break
                except Exception as e:
                    page.close()
                    context.close()
                    browser.close()
                    break
        url_complete += 1
    running[index] = ["Done", "", ""]

def process_url(dem, index, lock, proxy_type):
        with sync_playwright() as playwright:
            run(playwright, dem, index, proxy_type, lock)

def checking():
    global url_complete, running, start_time, status
    while status:
        for j in range(len(running)):
            if running[j][0]=="Click Success" or running[j][0]=="Done":
                print(f"\033[32mThread {j+1}: {running[j][0]} | {running[j][1]} | {running[j][2]}\033[0m")
                print("")
            elif running[j][0]=="Clicking":
                print(f"\033[33mThread {j+1}: {running[j][0]} | {running[j][1]} | {running[j][2]}\033[0m")
                print("")
            else:
                print(f"\033[36mThread {j+1}: {running[j][0]} | {running[j][1]} | {running[j][2]}\033[0m")
                print("")
        end_time = time.time()

        execution_time = end_time - start_time
        hours, rem = divmod(execution_time, 3600)
        minutes, seconds = divmod(rem, 60)
        formatted_time = "{:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds)

        print(f"\033[33mProcess: {formatted_time} - Url complete: {url_complete}\033[0m")
        time.sleep(1)
        os.system('cls')


start_tool = input("Enter để băt đầu...")
list_url = askopenfilename(title="Chọn file chứa danh sách URL cần truy cập", filetypes=[("Text files", "*.txt")])
list_url = [line.strip() for line in open(list_url, "r").readlines()]
print(f"Data: {len(list_url)} urls")
while True:
    try:
        dem = int(input("Nhập số lần truy cập: "))
        break
    except ValueError:
        print("Số lần truy cập phải là số nguyên")
        continue
while True:
    try:
        luong = int(input("Nhập số luồng: "))
        break
    except ValueError:
        print("Số luồng phải là số nguyên")
        continue
while True:
    try:
        timeout = int(input("Nhập timeout(s): "))
        break
    except ValueError:
        print("Số timeout phải là số nguyên")
        continue

while True:
    try:
        proxy_type = int(input("Chọn loại proxy (1. Proxy us |2. Proxy Asia): "))
        if proxy_type not in [1, 2]:
            print("Loại proxy không hợp lệ")
            continue
        break
    except ValueError:
        print("Loại proxy phải là số nguyên")
        continue
while True:
    try:
        version = int(input("Chọn version (1. 1.0 |2. 2.0): "))
        if proxy_type not in [1, 2]:
            print("Loại version")
            continue
        break
    except ValueError:
        print("Loại version phải là số nguyên")
        continue


url_complete = 0
running = [['','',''] for _ in range(luong)]
lock = threading.Lock()
status = True
start_time = time.time()
t = threading.Thread(target=checking)
t.start()
tt = threading.Thread(target=change_proxy, args=(proxy_type,))
tt.start()
threads = []
for i in range(luong):
    thread = threading.Thread(target=process_url, args=(dem, i, lock, proxy_type,))
    threads.append(thread)
    thread.start()
for thread in threads:
    thread.join()
t.join()
tt.join()
end_time = time.time()

execution_time = end_time - start_time
hours, rem = divmod(execution_time, 3600)
minutes, seconds = divmod(rem, 60)
formatted_time = "{:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds)

print(f"\033[33mProcess: {formatted_time}\033[0m")
output = input("Nhấn Enter để thoát...")
status = False
output = input("Nhấn Enter để thoát...")
status = False
