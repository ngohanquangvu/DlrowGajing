app = customtkinter.CTk()
app.title("GanJingWorld")
app.geometry("350x420")

def stop():
    pass

total = 0

def check_status():
    d = 0
    if len(list_userpass)==0:
        frame_text_box.configure(state = "normal")
        frame_text_box.insert(customtkinter.END, f'Vui lòng nhập file account\n')
        frame_text_box.configure(state = "disabled")
        d+=1
    try:
        check = int(delay.get())
    except:
        frame_text_box.configure(state = "normal")
        frame_text_box.insert(customtkinter.END, f'Vui lòng nhập đúng định dạng của delay\n')
        frame_text_box.configure(state = "disabled")
        d+=1
    try:
        check = int(change_account.get())
    except Exception as e:
        print(str(e))
        frame_text_box.configure(state = "normal")
        frame_text_box.insert(customtkinter.END, f'Vui lòng nhập đúng định dạng của số bài đăng\n')
        frame_text_box.configure(state = "disabled")
        d+=1
    if d>0: return False
    else: return True
def eaabw(cookie):
    head = {
        "cookie":cookie,
        "Host":"m.facebook.com",
        "cache-control":"max-age=0",
        "upgrade-insecure-requests":"1",
        "origin":"https://mbasic.facebook.com",
        "content-type":"application/x-www-form-urlencoded",
        "user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0",
        "accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "x-requested-with":"mark.via.gp",
        "sec-fetch-site":"same-origin",
        "sec-fetch-mode":"navigate",
        "sec-fetch-user":"?1",
        "sec-fetch-dest":"document",
        "referer":"https://mbasic.facebook.com/dialog/oauth?encrypted_query_string=AeC8BVQ7ctjgpS9OzeGcgZu8VAHuuYRJlLKyB5NEYWlKsjPkU7BA5r0pbsXZLqw7Nlde8AWnp3Sa1XIq20qnPoHpzNEgb4qLpydMqy6CixrSTHOGiMs1-5_3j9tIeUcCV7vBUm1y_IQjy1dmjzrWzmAhtgz7scvu2CFVtSD1irg8j_73c8N4Bvpr9KxEmPgyHAcZMhhZ6zkw8Sl64BXgD1Gn8n3kPuSjQWRdCpBjqJbZyHkJuuI_fUeWrYNc6QdkdZPos3MkYQlUuEoZhFnXH7s_OytvqmIbLSHBpoPRXLSmv3UX6LNfWZp7pv0ZoOQ8v3opxbOuse0J-LvThFlu-i4mGKHHqA9TdCq2TLcAAAQzOcASfjFbs_H4E66168gYBHylPtHjsjAzUAo1ILy5p5TQvbZxrk4kpdOjhOoKj-pmOASDwXS6VH7Isup9j4eW1lAjDg-V2zo60W7Woi-HqPeliE5BiEib7lp7PBC0njUNZP8TXTD2XWUMgyO2wpHk5GYd1x1J1fSEzRzvfvQ4b8pz6f9qRfN1wXJk6Ls9wJBStJQViipbU3QGoo9v2LwuCNM9k4NHtv-1o7kPqXX0v5Vuuwbx6tN112i9_zJVbr7NafaatOR0cPt0k09wfvXdcOWOdBeAho28-aqGrwrZhga80JYJ5u5Jwxoajquxb8kEDdUjO8STzMv_9dDNUMSFyxuE-KKHdaYbnQB2AGHYQF_TkOL6Ck545wft9_dG0lMv9-XY4TOmlymzIGAG_Mt0wXM4G4wHuJ6uGzH3B0sOs0e2aVyk-Wzf14eZMs0vLIBdGyrSyt04BFupFMFAMu3WpMNJJhg87xG6_p9esk8O9Yl0kVve8CYudg-ZMZ7cXJTyXG4myoC-mJNyecUYitOdOFtShfY_WOv5-luqmbAic3nN8pWKvUdApO7uxodX-0iT1yrO26zkvZ5dkBOLkQUfEsDM-56sdOLEmKAeJXpAzuTl9cIHIlDgWHtq0iuYV48uz0ejcVovPzznIo-IwX36CAyPnlF7VvtTDec_9O1VFvWl25V56DaEunKr8A5Tx4CZPw2Z-EsGkKsW9eaGpHBgjMUHvr30vEKC8ShxthHdHN9EQhPrPyIIVGtw",
        "accept-encoding":"gzip, deflate",
        "accept-language":"vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7",
        }
    get = requests.get("https://mbasic.facebook.com/dialog/oauth?encrypted_query_string=AeC8BVQ7ctjgpS9OzeGcgZu8VAHuuYRJlLKyB5NEYWlKsjPkU7BA5r0pbsXZLqw7Nlde8AWnp3Sa1XIq20qnPoHpzNEgb4qLpydMqy6CixrSTHOGiMs1-5_3j9tIeUcCV7vBUm1y_IQjy1dmjzrWzmAhtgz7scvu2CFVtSD1irg8j_73c8N4Bvpr9KxEmPgyHAcZMhhZ6zkw8Sl64BXgD1Gn8n3kPuSjQWRdCpBjqJbZyHkJuuI_fUeWrYNc6QdkdZPos3MkYQlUuEoZhFnXH7s_OytvqmIbLSHBpoPRXLSmv3UX6LNfWZp7pv0ZoOQ8v3opxbOuse0J-LvThFlu-i4mGKHHqA9TdCq2TLcAAAQzOcASfjFbs_H4E66168gYBHylPtHjsjAzUAo1ILy5p5TQvbZxrk4kpdOjhOoKj-pmOASDwXS6VH7Isup9j4eW1lAjDg-V2zo60W7Woi-HqPeliE5BiEib7lp7PBC0njUNZP8TXTD2XWUMgyO2wpHk5GYd1x1J1fSEzRzvfvQ4b8pz6f9qRfN1wXJk6Ls9wJBStJQViipbU3QGoo9v2LwuCNM9k4NHtv-1o7kPqXX0v5Vuuwbx6tN112i9_zJVbr7NafaatOR0cPt0k09wfvXdcOWOdBeAho28-aqGrwrZhga80JYJ5u5Jwxoajquxb8kEDdUjO8STzMv_9dDNUMSFyxuE-KKHdaYbnQB2AGHYQF_TkOL6Ck545wft9_dG0lMv9-XY4TOmlymzIGAG_Mt0wXM4G4wHuJ6uGzH3B0sOs0e2aVyk-Wzf14eZMs0vLIBdGyrSyt04BFupFMFAMu3WpMNJJhg87xG6_p9esk8O9Yl0kVve8CYudg-ZMZ7cXJTyXG4myoC-mJNyecUYitOdOFtShfY_WOv5-luqmbAic3nN8pWKvUdApO7uxodX-0iT1yrO26zkvZ5dkBOLkQUfEsDM-56sdOLEmKAeJXpAzuTl9cIHIlDgWHtq0iuYV48uz0ejcVovPzznIo-IwX36CAyPnlF7VvtTDec_9O1VFvWl25V56DaEunKr8A5Tx4CZPw2Z-EsGkKsW9eaGpHBgjMUHvr30vEKC8ShxthHdHN9EQhPrPyIIVGtw", headers=head).text
    fb = get.split('name="fb_dtsg" value="')[1].split('"')[0]
    scope = get.split('name="scope" value="')[1].split('"')[0]
    logger_id = get.split('name="logger_id" value="')[1].split('"')[0]
    encrypted_post_body = get.split('name="encrypted_post_body" value="')[1].split('"')[0]
    data = {
	"cookie":cookie,
	"fb_dtsg": fb,
	"jazoest":"25480",
	"scope":scope,
	"display":"touch",
	"sdk":"",
	"sdk_version":"",
	"domain":"",
	"sso_device":"ios",
	"state":"",
	"user_code":"",
	"nonce":"",
	"logger_id":logger_id,
	"auth_type":"",
	"auth_nonce":"",
	"code_challenge":"",
	"code_challenge_method":"",
	"encrypted_post_body":encrypted_post_body,
	"return_format[]":"access_token"
	}
    get = requests.post("https://m.facebook.com/dialog/oauth/skip/submit/?paipv=0&eav=Afa2uLWDW0GTp9dR1Q9kn2mF90FWnFS6bk2nYDeGhRY_vS_DZOkGVLsNRVEQUHAp9VU", headers=head, data=data).text
    token = get.split("#access_token=")[1].split("&")[0]
    return token

if os.path.exists("./SaveData")==False: os.mkdir("./SaveData")  
if os.path.exists("./ImageData")==False: os.mkdir("./ImageData")  

list_token = []

global_proxy = {
    "http":"http://TgtdXU:fdNFnE@hub-us-8.litport.net:31337",
    "https":"http://TgtdXU:fdNFnE@hub-us-8.litport.net:31337"
}


def get_content(page_username, number):
    global list_cookie_fb, list_token, list_cookie_insta
    if ("facebook.com" in page_username)==True:
        try:
            access_token = random.choice(list_token)
        except:
            try:
                ck = random.choice(list_cookie_fb)
                access_token = eaabw(ck)
            except: get_content(page_username)
        if ("https://www.facebook.com/groups/" in page_username)==False:
            url = f"https://graph.facebook.com/?id={page_username}&access_token={access_token}"
            while True:
                try:
                    response = requests.get(url, proxies=global_proxy)
                    if response.status_code == 200:
                        data = response.json()
                        page_id = data['id']
                    else:
                        frame_text_box.configure(state = "normal")
                        frame_text_box.insert(customtkinter.END, f"{page_username} không hợp lệ\n")
                        frame_text_box.configure(state = "disabled")
                        return []
                    url = f"https://graph.facebook.com/v12.0/{page_id}/posts?access_token={access_token}&fields=message,full_picture"
                    break
                except SSLError:
                    try:
                        response = requests.get(url)
                        if response.status_code == 200:
                            data = response.json()
                            page_id = data['id']
                        else:
                            frame_text_box.configure(state = "normal")
                            frame_text_box.insert(customtkinter.END, f"{page_username} không hợp lệ\n")
                            frame_text_box.configure(state = "disabled")
                            return []
                        url = f"https://graph.facebook.com/v12.0/{page_id}/posts?access_token={access_token}&fields=message,full_picture"
                        break
                    except Exception as e: 
                        print(f"Error get page id {str(e)}")
                        continue
                except Exception as e: 
                    print(f"Error get page id {str(e)}")
                    continue
        else:
            page_id = page_username.split("https://www.facebook.com/groups/")[1].replace("/", "")
            if page_id.isdigit():
                url = f"https://graph.facebook.com/v12.0/{page_id}/feed?access_token={access_token}&fields=message,full_picture"
            else:
                try:
                    h = {
                        'Cookie':random.choice(list_cookie_fb),
                        'X-Asbd-Id':'129477',
                        'X-Fb-Lsd':'f3tEETGhpKrQLUeaRMHpHA',
                        'Content-Type':'application/x-www-form-urlencoded'

                    }

                    d = f"route_urls[0]=%2Fgroups%2F{page_id}&route_urls[1]=%2F&route_urls[2]=%2Ffriends&route_urls[3]=%2Fwatch%2F%3Fref%3Dtab&route_urls[4]=%2Fmarketplace%2F%3Fref%3Dapp_tab&route_urls[5]=%2Fgroups&route_urls[6]=%2Fbookmarks&routing_namespace=fb_comet&__aaid=0&__user=100080951779654&__a=1&__req=2&__hs=19807.HYP%3Acomet_pkg.2.1..2.1&dpr=1.5&__ccg=EXCELLENT&__rev=1012282625&__s=9l3uyn%3Atsn8wu%3Axauuw1&__hsi=7350354056686331426&__dyn=7xe6HwkEng5KbwKBAg35xu13w8CewSwMwNwcy0im3y4o0B-q1ew65xO0FE2awpUO0n24o5-0Bo2ygao1aU2sx-3m1CK0zEkxe2Gew9O222SUbElxm0zE5W0PU19VobpEbUGdwr82pw8O321LwTwNxe15g2Xwr86C0No4WVU8Edouw&__csr=ihkIIAr59e_ay9vkx9WWdlFtH9_9lmn9XGy4Fl-8hd7fQBSEC8kCVZpoOEOVknBQbV8GFEyFXUiypoC4eEkx2bHgC9WyA5VVozxy8DwCK6ogCwCx21ihEydg6O2y3y5U6m0x82hwee1ywiE4q1Twc20LE1PU3gw7cw7cw1ja0mi0wA00mBu0r-5iFw0_Nw0O4g4B1W00wko&__comet_req=15&fb_dtsg=NAcMbjXbcLxmU7Rl8IbuwET1Ww-aovuYtcSrvuE2UjEUxC54BjtWNXg%3A8%3A1711387111&jazoest=25621&lsd=f3tEETGhpKrQLUeaRMHpHA&__spin_r=1012282625&__spin_b=trunk&__spin_t=1711387666"

                    a =requests.post("https://www.facebook.com/ajax/bulk-route-definitions/", headers=h, data=d).text
                    page_id = a.split('"groupID":"')[1].split('"')[0]
                except:
                    frame_text_box.configure(state = "normal")
                    frame_text_box.insert(customtkinter.END, f"{page_username} không hợp lệ\n")
                    frame_text_box.configure(state = "disabled")
                    return []
            url = f"https://graph.facebook.com/v12.0/{page_id}/feed?access_token={access_token}&fields=message,full_picture"
        with open(f"./SaveData/{page_id}.txt", "a") as f: 
            f.write("")
        list_id_post = [i.strip("\n") for i in open(f"./SaveData/{page_id}.txt", "r").readlines()]
        list_content = []
        while True:
            try:
                while True:
                    try:
                        response = requests.get(url, proxies=global_proxy)
                        break
                    except SSLError:
                        try:
                            response = requests.get(url)
                            break
                        except Exception as e: 
                            print(f"Error get post id {str(e)}")
                            continue
                    except Exception as e: 
                        print(f"Erorr get post {str(e)}")
                        continue
                if response.status_code == 200:
                    data = response.json()
                    for post in data['data']:
                        if (post["id"] in  list_id_post) == False:
                            open(f"./SaveData/{page_id}.txt", "a").write(f"{post['id']}\n")
                            try:
                                list_content.append([process_text(post['message']), save_image(post["full_picture"])])
                            except:
                                try:
                                    list_content.append([process_text(post['message']), None])
                                except: continue
                            number -=1
                        else:
                            continue
                        if number==0: 
                            return list_content
                    try:
                        url = data['paging']['next']
                    except:
                            return list_content
                else:
                    continue
            except Exception as e:
                print(str(e))
                return list_content
    else:
        username = page_username.split("https://www.instagram.com/")[1].split("/")[0]
        with open(f"./SaveData/{username}.txt", "a") as f: 
            f.write("")
        list_id_post = [i.strip("\n") for i in open(f"./SaveData/{username}.txt", "r").readlines()]
        list_content = []
        after = "null"
        before = "null"
        d = f"av=17841443883636922&__d=www&__user=0&__a=1&__req=2&__hs=19811.HYP%3Ainstagram_web_pkg.2.1..0.1&dpr=1.5&__ccg=UNKNOWN&__rev=1012411283&__s=61rbep%3Ax17w49%3Adaymdo&__hsi=7351745151005392304&__dyn=7xeUjG1mxu1syUbFp40NonwgU7SbzEdF8aUco2qwJxS0k24o0B-q1ew65xO0FE2awpUO0n24oaEd86a3a1YwBgao6C0Mo2sx-0z8-U2zxe2GewGwso88cobEaU2eUlwhEe87q7U1bobpEbUGdwtU662O0z8c86-3u2WE5B0bK1Iwqo5q1IQp1yUoxeubxKi2K9xi&__csr=gH3skxAG8lPi8RhWLVb8SvFrBrWjmFFrAhVp4FidoN1domqO9LAF2ohAABWG47AKHiF16rGppAagyjh4iqS4lyol-59RBDF4XDQ6VoSahqKu9zJ1OiF68y8uxKA00l8mut2Fk0MU1iUgwyxa2m0A200KuIJwjQi2yOjKywIg2Uxa1SzES0aWw38Xbg1N42V1q1dg0EWaw9u0Ikqt2Fk01_Fw3C8&__comet_req=7&fb_dtsg=NAcPAraYFog_YbwZuRcIXJRGdwm-82G3TGWnqqx-nOWfPm6SRKKpsEQ%3A17864955220006059%3A1711711531&jazoest=26314&lsd=KUoLhXjvCsNml-RDhaU2kG&__spin_r=1012411283&__spin_b=trunk&__spin_t=1711711554&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=PolarisProfilePostsQuery&variables=%7B%22data%22%3A%7B%22count%22%3A12%2C%22include_relationship_info%22%3Atrue%2C%22latest_besties_reel_media%22%3Atrue%2C%22latest_reel_media%22%3Atrue%7D%2C%22username%22%3A%22{username}%22%2C%22__relay_internal__pv__PolarisShareMenurelayprovider%22%3Afalse%7D&server_timestamps=true&doc_id=7315554398525989"

        h = {
            'X-Asbd-Id':'129477',
            'X-Csrftoken':'qw4hrTG1k0TsR1bwmQyR99gfXsAgng5W',
            'X-Fb-Friendly-Name':'PolarisProfilePostsQuery',
            'X-Fb-Lsd':'KUoLhXjvCsNml-RDhaU2kG',
            'X-Ig-App-Id':'936619743392459',
            'Content-Type':'application/x-www-form-urlencoded',
            'Cookie':random.choice(list_cookie_insta),
        }

        a = requests.post("https://www.instagram.com/api/graphql", data=d, headers=h)
        b = a.json()["data"]["xdt_api__v1__feed__user_timeline_graphql_connection"]["edges"]
        while True:
            a = requests.post("https://www.instagram.com/api/graphql", data=d, headers=h)
            try: a.json()
            except:
                print(a.text)
                print(d)
                break
            b = a.json()["data"]["xdt_api__v1__feed__user_timeline_graphql_connection"]["edges"]
            after = (a.json()["data"]["xdt_api__v1__feed__user_timeline_graphql_connection"]["page_info"]["end_cursor"])
            for i in range(len(b)):
                number-=1
                if str(b[i]["node"]["caption"])=="None": 
                    list_content.append(["", save_image(b[i]["node"]["image_versions2"]["candidates"][0]["url"])])
                else:
                    list_content.append([process_text(b[i]["node"]["caption"]["text"]), save_image(b[i]["node"]["image_versions2"]["candidates"][0]["url"])])
                if number==0: 
                    return list_content
            if str(after)=="None": 
                return list_content
            d = f"av=17841443883636922&__d=www&__user=0&__a=1&__req=t&__hs=19812.HYP%3Ainstagram_web_pkg.2.1..0.1&dpr=1.5&__ccg=UNKNOWN&__rev=1012435051&__s=yto2ir%3Acm5ycb%3A7cycok&__hsi=7352103157604987213&__dyn=7xeUjG1mxu1syUbFp40NonwgU7SbzEdF8aUco2qwJxS0k24o0B-q1ew65xO0FE2awpUO0n24oaEd86a3a1YwBgao6C0Mo2sx-0z8-U2zxe2GewGwso88cobEaU2eUlwhEe87q7U1bobpEbUGdwtU662O0z8c86-3u2WE5B0bK1Iwqo5q1IQp1yUoxeubxKi2K9xi&__csr=gtMF45s4db9dAOjiGAhj8gAD9ZqF4F9_vi9CFrizmBGCHByaKXAFAu9UJ1aV9GCAiRm4eEBoZ92V9RoHJoiBADDCAyUoF3pVbKbG9LG4pqKEsjSi8Gq49oyVEco01ktEhggLo1ZUeo24hUsJw0M-ERxuVEIjo5uywuQ10wRgdEO0aYw3toEU1qpomy8Gl02UFE13o9Uixja01_uw1na&__comet_req=7&fb_dtsg=NAcOVS-_BHZuTJq-41q2cZrxdjzl7EQAyz6G1_NhyKl6RHi-cFAe5Bw%3A17864955220006059%3A1711711531&jazoest=26122&lsd=ZPzOFfysDwSnw8ASoSgsIU&__spin_r=1012435051&__spin_b=trunk&__spin_t=1711794910&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=PolarisProfilePostsTabContentQuery_connection&variables=%7B%22after%22%3A%22{after}%22%2C%22before%22%3A{before}%2C%22data%22%3A%7B%22count%22%3A12%2C%22include_relationship_info%22%3Atrue%2C%22latest_besties_reel_media%22%3Atrue%2C%22latest_reel_media%22%3Atrue%7D%2C%22first%22%3A12%2C%22last%22%3Anull%2C%22username%22%3A%22{username}%22%2C%22__relay_internal__pv__PolarisShareMenurelayprovider%22%3Afalse%7D&server_timestamps=true&doc_id=7345954515487186"


def remove_links(text):
    return re.sub(r'http\S+|www.\S+', '', text, flags=re.MULTILINE)

def process_hashtags(text):
    hashtags = re.findall(r'#\S+', text)
    hashtags_lower = [tag.lower() for tag in hashtags]
    unique_hashtags = list(set(hashtags_lower))

    if len(unique_hashtags) > 10:
        unique_hashtags = random.sample(unique_hashtags, 10)

    for tag in hashtags:
        if tag.lower() not in unique_hashtags:
            text = text.replace(tag, '', 1)
        else:
            unique_hashtags.remove(tag.lower())

    return text

def process_text(text):
    text = remove_links(text)
    text = process_hashtags(text)

    return text

def save_image(url):
    try:
        response = requests.get(url, stream=True)

        if response.status_code == 200:
            aaa = f'./ImageData/{time.time()}.jpg'
            with open(aaa, 'wb') as f:
                f.write(response.content)
            return aaa
    except: return None

list_login_token = []

def get_login_token():
    global list_login_token
    if len(list_login_token) != 0:
        return random.choice(list_login_token)
    else:
        h = {
            'Accept-Encoding':'gzip, deflate, br',
            'Accept-Language':'vi,en-US;q=0.9,en;q=0.8',
            'Content-Length':'2',
            'Content-Type':'application/json',
            'Gjw-Did':'1gjmbv5jtr91QJHTAAVmXmU5O12r0d',
            'Gjw-Sign':'ca57245fae3b3a03d6eaadb1cef531b4',
            'Gjw-Ts':'1710510510579',
            'Origin':'https://www.ganjingworld.com',
            'Referer':'https://www.ganjingworld.com/',
            'Sec-Ch-Ua':'"Chromium";v="122", "Not(A:Brand";v="24", "Microsoft Edge";v="122"',
            'Sec-Ch-Ua-Mobile':'?0',
            'Sec-Ch-Ua-Platform':'"Windows"',
            'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0',
            'X-Cdk-Dsid':'1b9be33b-2263-79b6-7da2-6fb5f24efc55',
            'X-Cdk-Lrtm':'2024-03-15 20:48:30',
        }

        token = requests.post("https://gw.ganjingworld.com/v1.0c/auth/guest/registration", json={}, headers=h).json()["data"]["accessToken"]
        list_login_token.append(token)
        return token


def login_and_post(email, password, data, access_token=None):
    global total
    dem = int(change_account.get())
    list_data = get_content(data, dem)
    if dem>len(list_data): dem = len(list_data)
    while dem>0:
        try:
            hehe = list_data[dem-1]
            content = hehe[0]
            img = hehe[1]
        except: 
            dem-=1
            continue
        if content==None: 
            return None
        if access_token!=None:
            pass
        else:
            try:
                while True:
                    try:
                        token_login = get_login_token()
                        d = {"user_email":email,"client_type":3}

                        h = {
                            'Authorization':token_login,
                            'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0',
                            'X-Cdk-Dsid':'1b9be33b-2263-79b6-7da2-6fb5f24efc55',    
                            'X-Cdk-Lrtm':'2024-03-15 20:57:36',
                            'Accept':'application/json, text/plain, */*',
                            'Accept-Encoding':'gzip, deflate, br',
                            'Accept-Language':'vi,en-US;q=0.9,en;q=0.8',
                            'Content-Length':'56',
                            'Origin':'https://www.ganjingworld.com',
                            'Referer':'https://www.ganjingworld.com/',
                            'Sec-Ch-Ua':'"Chromium";v="122", "Not(A:Brand";v="24", "Microsoft Edge";v="122"',
                            'Sec-Ch-Ua-Mobile':'?0',
                            'Sec-Ch-Ua-Platform':'"Windows"',
                        }
                        a = requests.post("https://gw.ganjingworld.com/v1.0c/signinpw", headers=h, json=d, proxies=global_proxy)
                        print(a.json())
                        break
                    except Exception as e:
                        print(f"Error get salt {str(e)}") 
                        continue
                if "The user does not exist" in a.text:
                    frame_text_box.configure(state = "normal")
                    frame_text_box.insert(customtkinter.END, f'Đăng nhập không thành công account {email}:{password}\n')
                    frame_text_box.configure(state = "disabled")
                    return None
                else:
                    open("log.txt", "a", encoding="utf-8").write(f"Result: {a.text} with account {email}:{password}\n")
                server_salt = a.json()["data"]["server_salt"]
                client_salt = a.json()["data"]["client_salt"]
                def hash_password(pss, client_salt, server_salt):
                    x = hashlib.sha256((pss + client_salt).encode()).digest()
                    x_base64 = base64.b64encode(x).decode()
                    S = hashlib.sha256((x_base64 + server_salt).encode()).digest()
                    S_base64 = base64.b64encode(S).decode()
                    return S_base64

                hashed_password = hash_password(password, client_salt, server_salt)
                print(hashed_password)

                d = {"user_email":email,"password_hash":hashed_password,"client_type":3}

                h = {
                    'Authorization':token_login,
                    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0',
                    'X-Cdk-Dsid':'1b9be33b-2263-79b6-7da2-6fb5f24efc55',    
                    'X-Cdk-Lrtm':'2024-03-15 20:57:36',
                    'Accept':'application/json, text/plain, */*',
                    'Accept-Encoding':'gzip, deflate, br',
                    'Accept-Language':'vi,en-US;q=0.9,en;q=0.8',
                    'Content-Length':'56',
                    'Origin':'https://www.ganjingworld.com',
                    'Referer':'https://www.ganjingworld.com/',
                    'Sec-Ch-Ua':'"Chromium";v="122", "Not(A:Brand";v="24", "Microsoft Edge";v="122"',
                    'Sec-Ch-Ua-Mobile':'?0',
                    'Sec-Ch-Ua-Platform':'"Windows"',
                }
                while True:
                    try:
                        a = requests.post("https://gw.ganjingworld.com/v1.0c/signinpw", headers=h, json=d, proxies=global_proxy)
                        if "Password is incorrect" in a.text:
                            frame_text_box.configure(state = "normal")
                            frame_text_box.insert(customtkinter.END, f'Đăng nhập không thành công account {email}:{password}\n')
                            frame_text_box.configure(state = "disabled")
                            return None
                        access_token = a.json()["data"]["token"]
                        break
                    except Exception as e: 
                        print(f"Error login {str(e)}") 
                        pass
            except Exception as e:
                open("log.txt", "a", encoding="utf-8").write(f"Error: {str(e)} with account {email}:{password}\n")
                frame_text_box.configure(state = "normal")
                frame_text_box.insert(customtkinter.END, f'IP bị block\n')
                frame_text_box.configure(state = "disabled")
                time.sleep(10)
                login_and_post(email, password, data, None)
        def get_webp_url(media_list):
            for url in media_list:
                if url.endswith('origin.webp'):
                    return url
            return None

        d = {
            'allowGuest': "true",
            'in_topic': "",
            'lang': "vi-VN",
            "media":[],
            'mode': "ready",
            'premium': 0,
            'text': content,
            'type': "Post",
            'visibility': "public"
        }

        h = {
            "Authorization":access_token
        }
        print(access_token)
        try:
            a = requests.post("https://gw.ganjingworld.com/v1.0c/social-content/add-post", json=d, headers=h).json()
            data_post = a["data"]
            try:
                image_token = requests.get(f"https://gw.ganjingworld.com/v1.1/get-vod-token?content_id={data_post['id']}", headers=h).json()["data"]["token"]
                if img!=None:
                        try:
                            b =  requests.post("https://imgapi.cloudokyo.cloud/api/v1/image", files={'file': (img, open(img, "rb"), 'image/png')}, headers={"Authorization":f"Bearer {image_token}"}, proxies=global_proxy).json()
                            img_list =b["body"]["image_url"]

                            url = get_webp_url(img_list)
                            data_post["media"] = [{"url":url,"id":"01ec6abc-a96c-4bfd-841f-d0ac576d4f13","width":745,"height":656,"ratio":0.8805369127516779,"type":"Image","analyzed_result":"{\"process_time\":\"0.0752 seconds\",\"result\":\"Good\"}\n"}]
                            post_image = requests.post("https://gw.ganjingworld.com/v1.0c/social-content/update-post", headers=h, json=data_post).json()
                        except (ConnectionError, ConnectionAbortedError):  
                            print(str(e))
                            continue
            except:
                open("log.txt", "a", encoding="utf-8").write(f"Result: {a} with account {email}:{password}\n")
            frame_text_box.configure(state = "normal")
            frame_text_box.insert(customtkinter.END, f'Đăng {int(change_account.get())-dem+1} post thành công với account {email}:{password}\n')
            total+=1
            frame_text_box.configure(state = "disabled")
            list_data.remove(list_data[dem-1])
            dem-=1
            open("Result.txt", "a", encoding="utf-8").write(f"Post {data_post['id']}, Image {img} with account {email}:{password}\n")
            time.sleep(int(delay.get()))
        except Exception as e:
            open("log.txt", "a", encoding="utf-8").write(f"Error: {str(e)} in add post with account {email}:{password}\n")
            frame_text_box.configure(state = "normal")
            frame_text_box.insert(customtkinter.END, f'Đăng post không thành công với account {email}:{password}\n')
            frame_text_box.configure(state = "disabled")
            login_and_post(email, password, data, None)
    print(f"Done with acc {email}:{password}")

def update_sl():
    global total
    while True:
        total_text_box.configure(text=f"Tổng số lượng bài đăng: {total}")
        time.sleep(1)

def start():
    global list_token
    def runn():
        list_token.append(eaabw(random.choice(list_cookie_fb)))
        for i in range(0, len(list_userpass), int(luong.get())):
            threads = []
            aaa = list_userpass[i:i+int(luong.get())]
            for j in range(len(aaa)):
                acc = aaa[j].split("|")
                threads.append(threading.Thread(target=login_and_post, args=(acc[0], acc[1], acc[2])))
            for thread in threads:
                thread.start()
            for thread in threads:
                thread.join()
        frame_text_box.configure(state = "normal")
        frame_text_box.insert(customtkinter.END, f'Hoàn thành nhiệm vụ')
        frame_text_box.configure(state = "disabled")
        os.system("rmdir /s /q ImageData")
        os.mkdir("./ImageData")  
    if check_status():
        frame_text_box.configure(state = "normal")
        frame_text_box.insert(customtkinter.END, f'Bắt đầu chạy...\n')
        frame_text_box.configure(state = "disabled")
        threading.Thread(target=runn).start()
        threading.Thread(target=update_sl).start()



list_userpass = []

def open_file_userpass():
    global list_userpass
    from tkinter import filedialog
    file_text_path = filedialog.askopenfilename(filetypes=[("Txt files", "*.txt")], title="Choose data file")
    if file_text_path!="":
        a = open(file_text_path, "r").readlines()
        for cell in a:
            test = cell.strip("\n").split("|")
            if len(test)==3 and test[0]!="" and test[1]!="" and test[2]!="":
                list_userpass.append(cell.strip("\n"))
        frame_text_box.configure(state = "normal")
        frame_text_box.insert(customtkinter.END, f'Import success {len(list_userpass)} Data\n')
        frame_text_box.configure(state = "disabled")

list_cookie_fb = []
list_cookie_insta = []

def open_file_cookie():
    global list_cookie_fb, list_cookie_insta
    from tkinter import filedialog
    file_text_path = filedialog.askopenfilename(filetypes=[("Txt files", "*.txt")], title="Choose cookie file")
    if file_text_path!="":
        a = open(file_text_path, "r").readlines()
        for cell in a:
            test = cell.strip("\n")
            if "c_user=" in test:
                list_cookie_fb.append(test)
            else:
                list_cookie_insta.append(test)
        frame_text_box.configure(state = "normal")
        frame_text_box.insert(customtkinter.END, f'Import success {len(list_cookie_fb)} Cookie Fb and {len(list_cookie_insta)} Cookie Insta\n')
        frame_text_box.configure(state = "disabled")

infor_input = customtkinter.CTkFrame(app, width = 310)
infor_input.grid(row = 0, column = 0, padx = 20, pady = (20, 10))
delay = customtkinter.CTkEntry(infor_input, width = 100, placeholder_text="Delay")
delay.grid(row = 0, column = 0, padx = (0, 5))
luong = customtkinter.CTkEntry(infor_input, width = 100, placeholder_text="Luồng")
luong.grid(row = 0, column = 1, padx = (0, 0))
change_account = customtkinter.CTkEntry(infor_input, width = 100, placeholder_text="Nhập số post")
change_account.grid(row = 0, column = 2, padx = (5, 0))

button_frame = customtkinter.CTkFrame(app, width = 260, height= 50)
button_frame.grid(row = 2, column = 0, pady = 10)

start_button = customtkinter.CTkButton(button_frame, width = 80, height = 50, text = 'Start', command=start)
start_button.grid(row = 0, column = 1, padx = (0,0))

stop_button = customtkinter.CTkButton(button_frame, width = 80, height = 50, text = 'Cookie', command=open_file_cookie)
stop_button.grid(row = 0, column = 2, padx = (10,10))

file_button = customtkinter.CTkButton(button_frame, width = 80, height = 50, text = 'Data', command=open_file_userpass)
file_button.grid(row = 0, column = 3, padx = (0,0))


frame_text_box = customtkinter.CTkTextbox(app, width = 300, height= 220)
frame_text_box.grid(row = 4, column = 0, pady = 10)
frame_text_box.configure(state = "disabled")

total_text_box = customtkinter.CTkLabel(app, text=f"Tổng số lượng bài đăng: {total}")
total_text_box.grid(row = 5, column = 0, pady = 0)

app.mainloop()
