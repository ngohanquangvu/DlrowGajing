if not os.path.exists('ImageData'):
    os.makedirs('ImageData')

def eaabw(cookie):
	head = {
	"Cookie":cookie,
	"Host":"m.facebook.com",
	"cache-control":"max-age=0",
	"upgrade-insecure-requests":"1",
	"origin":"https://m.facebook.com",
	"content-type":"application/x-www-form-urlencoded",
	"user-agent":"Mozilla/5.0 (Linux; Android 12; SM-A217F Build/SP1A.210812.016) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.104 Mobile Safari/537.36",
	"accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
	"x-requested-with":"mark.via.gp",
	"sec-fetch-site":"same-origin",
	"sec-fetch-mode":"navigate",
	"sec-fetch-user":"?1",
	"sec-fetch-dest":"document",
	"referer":"https://m.facebook.com/dialog/oauth?client_id=124024574287414&redirect_uri=https://www.instagram.com/accounts/signup/&&scope=email&response_type=token",
	"accept-encoding":"gzip, deflate",
	"accept-language":"vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7",
	}
	get = requests.get("https://m.facebook.com/dialog/oauth?client_id=124024574287414&redirect_uri=https://www.instagram.com/accounts/signup/&&scope=email&response_type=token", headers=head).text
	fb = get.split('name="fb_dtsg" value="')[1].split('"')[0]
	jazoest = get.split('name="jazoest" value="')[1].split('"')[0]
	scope = get.split('name="scope" value="')[1].split('"')[0]
	logger_id = get.split('name="logger_id" value="')[1].split('"')[0]
	encrypted_post_body = get.split('name="encrypted_post_body" value="')[1].split('"')[0]
	data = {
	"Cookie":cookie,
	"fb_dtsg": fb,
	"jazoest":"25480",
	"scope":scope,
	"display":"touch",
	"sdk":"",
	"sdk_version":"",
	"domain":"",
	"sso_device":"ios",
	"state":"",
	"user_code":"",
	"nonce":"",
	"logger_id":logger_id,
	"auth_type":"",
	"auth_nonce":"",
	"code_challenge":"",
	"code_challenge_method":"",
	"encrypted_post_body":encrypted_post_body,
	"return_format[]":"access_token"
	}
	get = requests.post("https://m.facebook.com/dialog/oauth?client_id=124024574287414&redirect_uri=https://www.instagram.com/accounts/signup/&&scope=email&response_type=token", headers=head, data=data)
	a = requests.get("https://m.facebook.com/dialog/oauth?client_id=124024574287414&redirect_uri=https://www.instagram.com/accounts/signup/&&scope=email&response_type=token", headers={"Cookie":cookie}).url
	return a.split("#access_token=")[1].split("&")[0]


def get_friend_info(cookie, list_id):
    print("Đang lấy thông tin bạn bè...")
    access_token = eaabw(cookie)
    for user_id in list_id:
        user_info_url = f'https://graph.facebook.com/{user_id}?fields=name,picture.type(large)&access_token={access_token}'
        response = requests.get(user_info_url)
        user_info = response.json()
        open("result.txt","a",encoding="utf-8").write(f'{user_info["name"]}|{user_info["picture"]["data"]["url"]}'+"\n")
        friends_url = f'https://graph.facebook.com/{user_id}/friends?fields=id,picture.type(large),name&access_token={access_token}'
        response = requests.get(friends_url)
        friends_list = response.json()
        for i in friends_list["data"]:
            open("result.txt","a",encoding="utf-8").write(f'{i["name"]}|{i["picture"]["data"]["url"]}'+"\n")
        while 'paging' in friends_list and 'after' in friends_list['paging']["cursors"]:
            next_url = friends_list['paging'].get('cursors').get('after')
            payload = {
                    "access_token": access_token
                }
            response = requests.get(f"https://graph.facebook.com/v18.0/{user_id}/friends?fields=id,picture.type(large),name&after="+next_url, params=payload)
            friends_list = response.json()
            for i in friends_list["data"]:
                open("result.txt","a",encoding="utf-8").write(f'{i["name"]}|{i["picture"]["data"]["url"]}'+"\n")

def save_image(url):
    try:
        response = requests.get(url)

        if response.status_code == 200:
            aaa = f'./ImageData/{time.time()}.jpg'
            with open(aaa, 'wb') as f:
                f.write(response.content)
            return aaa
    except: return None

def get_webp_url(media_list):
            for url in media_list:
                if url.endswith('origin.webp'):
                    return url
            return None

def get_webp_url(media_list):
            for url in media_list:
                if url.endswith('origin.webp'):
                    return url
            return None


list_login_token = []
def get_login_token():
    global list_login_token
    if len(list_login_token) != 0:
        return random.choice(list_login_token)
    else:
        h = {
            'Accept-Encoding':'gzip, deflate, br',
            'Accept-Language':'vi,en-US;q=0.9,en;q=0.8',
            'Content-Length':'2',
            'Content-Type':'application/json',
            'Gjw-Did':'1gjmbv5jtr91QJHTAAVmXmU5O12r0d',
            'Gjw-Sign':'ca57245fae3b3a03d6eaadb1cef531b4',
            'Gjw-Ts':'1710510510579',
            'Origin':'https://www.ganjingworld.com',
            'Referer':'https://www.ganjingworld.com/',
            'Sec-Ch-Ua':'"Chromium";v="122", "Not(A:Brand";v="24", "Microsoft Edge";v="122"',
            'Sec-Ch-Ua-Mobile':'?0',
            'Sec-Ch-Ua-Platform':'"Windows"',
            'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0',
            'X-Cdk-Dsid':'1b9be33b-2263-79b6-7da2-6fb5f24efc55',
            'X-Cdk-Lrtm':'2024-03-15 20:48:30',
        }

        token = requests.post("https://gw.ganjingworld.com/v1.0c/auth/guest/registration", json={}, headers=h).json()["data"]["accessToken"]
        list_login_token.append(token)
        return token
    
def login(account):
    email = account.split("|")[0]
    password = account.split("|")[1]
    scraper = cloudscraper.create_scraper()
    while True:
        try:
            token_login = get_login_token()
            d = {"user_email":email,"client_type":3}

            h = {
                'Authorization':token_login,
                'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0',
                'X-Cdk-Dsid':'1b9be33b-2263-79b6-7da2-6fb5f24efc55',    
                'X-Cdk-Lrtm':'2024-03-15 20:57:36',
                'Accept':'application/json, text/plain, */*',
                'Accept-Encoding':'gzip, deflate, br',
                'Accept-Language':'vi,en-US;q=0.9,en;q=0.8',
                'Content-Length':'56',
                'Origin':'https://www.ganjingworld.com',
                'Referer':'https://www.ganjingworld.com/',
                'Sec-Ch-Ua':'"Chromium";v="122", "Not(A:Brand";v="24", "Microsoft Edge";v="122"',
                'Sec-Ch-Ua-Mobile':'?0',
                'Sec-Ch-Ua-Platform':'"Windows"',
            }
            pr = "0JeLKc:G69qYC@hub-us-8.litport.net:31682"
            p = {
                "http":f"http://{pr}",
                "https":f"http://{pr}"
            }
            a = scraper.post("https://gw.ganjingworld.com/v1.0c/signinpw", headers=h, json=d, proxies=p)
            b = a.json()
            break
        except Exception as e: 
            continue
    if "The user does not exist" in a.text:
        return None
    else:
        open("log.txt", "a", encoding="utf-8").write(f"Result: {a.text} with account {email}:{password}\n")
    server_salt = a.json()["data"]["server_salt"]
    client_salt = a.json()["data"]["client_salt"]
    def hash_password(pss, client_salt, server_salt):
        x = hashlib.sha256((pss + client_salt).encode()).digest()
        x_base64 = base64.b64encode(x).decode()
        S = hashlib.sha256((x_base64 + server_salt).encode()).digest()
        S_base64 = base64.b64encode(S).decode()
        return S_base64

    hashed_password = hash_password(password, client_salt, server_salt)

    d = {"user_email":email,"password_hash":hashed_password,"client_type":3}

    h = {
        'Authorization':token_login,
        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0',
        'X-Cdk-Dsid':'1b9be33b-2263-79b6-7da2-6fb5f24efc55',    
        'X-Cdk-Lrtm':'2024-03-15 20:57:36',
        'Accept':'application/json, text/plain, */*',
        'Accept-Encoding':'gzip, deflate, br',
        'Accept-Language':'vi,en-US;q=0.9,en;q=0.8',
        'Content-Length':'56',
        'Origin':'https://www.ganjingworld.com',
        'Referer':'https://www.ganjingworld.com/',
        'Sec-Ch-Ua':'"Chromium";v="122", "Not(A:Brand";v="24", "Microsoft Edge";v="122"',
        'Sec-Ch-Ua-Mobile':'?0',
        'Sec-Ch-Ua-Platform':'"Windows"',
    }
    while True:
        try:
            pr = "0JeLKc:G69qYC@hub-us-8.litport.net:31682"
            p = {
                "http":f"http://{pr}",
                "https":f"http://{pr}"
            }
            a = scraper.post("https://gw.ganjingworld.com/v1.0c/signinpw", headers=h, json=d, proxies=p)
            if "Password is incorrect" in a.text:
                return None
            access_token = a.json()["data"]["token"]
            return access_token
        except Exception as e: 
            pass
data_fb = []
data_bio = []
data_token = []
def update_channel(account):
    global data_fb, data_bio, data_token
    print(f"Login with account {account}")
    while True:
        try:
            token = login(account)
            if token != None:
                break
            else: 
                print(f"Login error with account {account}")
                return
        except: continue
    print(f"Login success with account {account}")
    try:
        data = random.choice(data_fb)
        bio = random.choice(data_bio)
        img = save_image(data.split("|")[1])
        name = data.split("|")[0]
    except:
        print(f"Data nhập vào bị thiếu với acc {account}")
        return
    h = {
        "Content-Type": "application/json",
        "Authorization": token,
    }
    pr = "0JeLKc:G69qYC@hub-us-8.litport.net:31682"
    p = {
        "http":f"http://{pr}",
        "https":f"http://{pr}"
    }
    print(f"Upload img with account {account}")
    if img == None:
        url = ""
    else:
        while True:
            try:
                if len(data_token) == 0:
                    image_token = requests.get(f"https://gw.ganjingworld.com/v1.0c/get-vod-token?", headers=h).json()["data"]["token"]
                    data_token.append(image_token)
                else:
                    image_token = random.choice(data_token)
                scraper = cloudscraper.create_scraper()
                b =  scraper.post("https://imgapi.cloudokyo.cloud/api/v1/image", files={'file': (img, open(img, "rb"), 'image/png')}, headers={"Authorization":f"Bearer {image_token}"}, proxies=p).json()
                img_list =b["body"]["image_url"]
                url = get_webp_url(img_list)
                break
            except Exception as e:
                open("log.txt", "a", encoding="utf-8").write(f"Error: {str(e)} with account {account}\n")
                continue
    while True:
        try:
            scraper = cloudscraper.create_scraper()
            uid = scraper.post("https://gw.ganjingworld.com/v1.0c/get-my-channels", headers=h, json={"lan":"en-US"}, proxies=p).json()["data"]["channels"][0]["id"]
            break
        except: continue
    if url == "":
        d = {"name":name,"desc":bio,"id":uid}
    else:
        d = {"name":name,"desc":bio,"id":uid,"avatar_url":url}
    scraper = cloudscraper.create_scraper()
    print(f"Update channel with account {account}")
    while True:
        try:
            a = scraper.post("https://gw.ganjingworld.com/v1.0c/update-channel", headers=h, json=d, proxies=p).json()
            if a["result"]["message"] == "Ok":
                print(f"Update success with account {account}")
            else:
                open("log.txt", "a", encoding="utf-8").write(f"Result: {str(a)} with account {account}\n")
                print(f"Update error with account {account}")
            break
        except:
            pass


def crawl_content(id_channel):
    global list_login_token
    data_content = []
    token = ""
    start_key = ""
    while True:
        try:
            channel =requests.get(f'https://gw.ganjingworld.com/v1.1/content/get-by-channel?lang=en-US&start_key={start_key}&channel_id={id_channel}&page_size=100&content_type=Video&include_hidden=true&query=basic,view&visibility=public&mode=ready', headers={"Authorization":token}).json()
            a = channel["data"]["list"]
            if a == [] or a == None:
                break
            for i in a:
                data_content.append(i["id"])
            start_key = channel["data"]["start_key"]
            if start_key == "":
                break
        except Exception as e:
            try: 
                list_login_token.remove(token)
                token = get_login_token()
            except: pass


    start_key = ""
    while True:
        try:
            channel =requests.get(f'https://gw.ganjingworld.com/v1.1/content/get-by-channel?lang=en-US&start_key={start_key}&channel_id={id_channel}&page_size=100&content_type=Shorts&include_hidden=true&query=basic,view&visibility=public&mode=ready', headers={"Authorization":token}).json()
            a = channel["data"]["list"]
            if a == [] or a == None:
                break
            for i in a:
                data_content.append(i["id"])
            start_key = channel["data"]["start_key"]
            if start_key == "":
                break
        except Exception as e: 
            try: 
                list_login_token.remove(token)
                token = get_login_token()
            except: pass
    return data_content


def crawl_post(id_channel):
    global list_login_token
    data_post = []
    token  = ""
    start_key = ""
    while True:
        try:
            channel =requests.get(f"https://gw.ganjingworld.com/v1.0c/social-content/get-owner-posts?owner_id={id_channel}&start_key={start_key}&page_size=100&query=post,view,like", headers={"Authorization":token}).json()
            a = channel["data"]["list"]
            if a == [] or a == None:
                break 
            for i in a:
                data_post.append(i["id"])
            start_key = channel["data"]["start_key"]
            if start_key == "":
                break
            
        except Exception as e:
            try: 
                list_login_token.remove(token)
                token = get_login_token()
            except: pass
    return data_post

def delete_post(account):
    print(f"Login with account {account}")
    while True:
        try:
            token = login(account)
            if token != None:
                break
            else: 
                print(f"Login error with account {account}")
                return
        except: continue
    print(f"Login success with account {account}")
    h = {
        "Content-Type": "application/json",
        "Authorization": token,
    }
    pr = "Eya6PSY2Jecb:ZHnY07wUhwRt@ipv6.proxiware.com:8080"
    p = {
        "http":f"http://{pr}",
        "https":f"http://{pr}"
    }
    id_channel = requests.post("https://gw.ganjingworld.com/v1.0c/get-my-channels", headers=h).json()["data"]["channels"][0]["id"]
    print(f"Get post with account {account}")
    data_post = crawl_post(id_channel)
    print(f"Get post success with account {account}")
    del_success = 0
    del_error = 0
    scraper = cloudscraper.create_scraper()
    for i in data_post:
        try:
            a = scraper.post(f"https://gw.ganjingworld.com/v1.0c/social-content/delete-post", json={"id":i}, headers=h, proxies=p).json()
            if a["result"]["message"] == "Ok":
                del_success += 1
            else:
                del_error += 1
            print(f"Delete success: {del_success} - Delete error: {del_error} with account {account}")
        except:
            data_post.append(i)
def delete_video_shorts(account):
    print(f"Login with account {account}")
    while True:
        try:
            token = login(account)
            if token != None:
                break
            else: 
                print(f"Login error with account {account}")
                return
        except: continue
    print(f"Login success with account {account}")
    h = {
        "Content-Type": "application/json",
        "Authorization": token,
    }
    pr = "Eya6PSY2Jecb:ZHnY07wUhwRt@ipv6.proxiware.com:8080"
    p = {
        "http":f"http://{pr}",
        "https":f"http://{pr}"
    }
    id_channel = requests.post("https://gw.ganjingworld.com/v1.0c/get-my-channels", headers=h).json()["data"]["channels"][0]["id"]
    print(f"Get content with account {account}")
    data_content = crawl_content(id_channel)
    print(f"Get content success with account {account}")
    del_success = 0
    del_error = 0
    scraper = cloudscraper.create_scraper()
    for i in data_content:
        try:
            a = scraper.post(f"https://gw.ganjingworld.com/v1.0c/delete-content", json={"id":i}, headers=h, proxies=p).json()
            if a["result"]["message"] == "Ok":
                del_success += 1
            else:
                del_error += 1
            print(f"Delete success: {del_success} - Delete error: {del_error} with account {account}")
        except Exception as e:
            data_content.append(i)
    
def menu():
    global data_fb, data_bio
    while True:
        # os.system("cls")
        print("1. Get friend info")
        print("2. Set profile")
        print("3. Delete post")
        print("4. Delete Video and Shorts")
        print("5. Exit")
        choice = int(input("Enter your choice: "))
        if choice == 1:
            data = input("Enter to import data")
            data = filedialog.askopenfilename(title="Select file data", filetypes=(("Text files", "*.txt"), ("all files", "*.*")))
            data = open(data, encoding="utf-8", errors="replace").read().split("\n")
            cookie = data[0]
            list_id = data[1:]
            get_friend_info(cookie, list_id)
            out = input("Data được lưu vào file result.txt, enter để quay lại menu")
        elif choice == 2:
            data = input("Enter to import account Ganjingworld")
            data = filedialog.askopenfilename(title="Select file data", filetypes=(("Text files", "*.txt"), ("all files", "*.*")))
            data = open(data, encoding="utf-8", errors="replace").readlines()
            data_acc = []
            for i in data:
                i = i.strip("\n")
                if (len(i.split("|")) >= 2) and (("@" in i.split("|")[0]) == True) and (i.split("|")[1] != "") and (i.split("|")[0] != ""):
                    data_acc.append(i)
            data = input("Enter to import data Facebook")
            data_fb = filedialog.askopenfilename(title="Select file data", filetypes=(("Text files", "*.txt"), ("all files", "*.*")))
            data_fb = open(data_fb, encoding="utf-8", errors="replace").read().split("\n")
            data = input("Enter to import data Bio")
            data_bio = filedialog.askopenfilename(title="Select file data", filetypes=(("Text files", "*.txt"), ("all files", "*.*")))
            data_bio = open(data_bio, encoding="utf-8", errors="replace").read().split("\n")
            luong = int(input("Nhập số luồng: "))
            for i in range(0, len(data_acc), luong):
                aaa = data_acc[i:i+luong]
                threads = []
                for j in aaa:
                    threads.append(threading.Thread(target=update_channel, args=(j,)))
                for thread in threads:
                    thread.start()
                for thread in threads:
                    thread.join()
            out = input("Enter to continue...")
            os.system("cls")
        elif choice == 3:
            data = input("Enter to import account Ganjingworld")
            data = filedialog.askopenfilename(title="Select file data", filetypes=(("Text files", "*.txt"), ("all files", "*.*")))
            data = open(data, encoding="utf-8", errors="replace").readlines()
            data_acc = []
            for i in data:
                i = i.strip("\n")
                if (len(i.split("|")) >= 2) and (("@" in i.split("|")[0]) == True) and (i.split("|")[1] != "") and (i.split("|")[0] != ""):
                    data_acc.append(i)
            luong = int(input("Nhập số luồng: "))
            for i in range(0, len(data_acc), luong):
                aaa = data_acc[i:i+luong]
                threads = []
                for j in aaa:
                    threads.append(threading.Thread(target=delete_post, args=(j.replace(" ",""),)))
                for thread in threads:
                    thread.start()
                for thread in threads:
                    thread.join()
            out = input("Enter to continue...")
            os.system("cls")
        elif choice == 4:
            data = input("Enter to import account Ganjingworld")
            data = filedialog.askopenfilename(title="Select file data", filetypes=(("Text files", "*.txt"), ("all files", "*.*")))
            data = open(data, encoding="utf-8", errors="replace").readlines()
            data_acc = []
            for i in data:
                i = i.strip("\n")
                if (len(i.split("|")) >= 2) and (("@" in i.split("|")[0]) == True) and (i.split("|")[1] != "") and (i.split("|")[0] != ""):
                    data_acc.append(i)
            luong = int(input("Nhập số luồng: "))
            for i in range(0, len(data_acc), luong):
                aaa = data_acc[i:i+luong]
                threads = []
                for j in aaa:
                    threads.append(threading.Thread(target=delete_video_shorts, args=(j.replace(" ",""),)))
                for thread in threads:
                    thread.start()
                for thread in threads:
                    thread.join()
            out = input("Enter to continue...")
            os.system("cls")
        elif choice == 5:
            break
menu()
